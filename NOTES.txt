Refer this playlist => https://www.youtube.com/playlist?list=PLbGui_ZYuhij6LpUbWgKUxggL_AuoHHVw

#! INSTALLATION OF DJANGO CHANNELS
1. Install channels using `pip install channels`
2. Now add `channels` in INSTALLED_APPS

#! ASGI
3. In the asgi.py file from the project directory, type the folowing code:
"
from channels.routing import ProtocolTypeRouter
application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    # Just HTTP for now. (We can add other protocols later.)
})
"
4. In settings.py, comment the following code:
"
WSGI_APPLICATION = 'DjangoChannelsWebSocketProject.wsgi.application'
"
5. In settings.py, after commenting the above code, add the following code: 
"
ASGI_APPLICATION = "myprojectname.asgi.application"
"

#! CONSUMERS
6. Now we have to create a consumers.py file in the application directory which acts same as the views.py file. It allows us to series of functions to be called along with sync and async functions.
7. The 3 functions are: websocket_connect, websocket_receive, websocket_disconnect.
8. websocket_connect => This handler is called when client initially opens a connection and is about to finish the WebSocket handshake.
9. websocket_receive => This handler is called when data received from Client.
10. websocket_disconnect => This handler is called when either connection to the client is lost, either from the client closing the connection, the server closing the connection, or loss of the socket.

#! ROUTING
11. Now we have to create a routing.py file in the application directory which acts same as the urls.py file.
12. Add the following code in routing.py:
"
websocket_urlpatterns = [
    path("ws/sc/", consumers.MySyncConsumer.as_asgi()),
    path("ws/ac/", consumers.MyAsyncConsumer.as_asgi()),
]
"
13. Write .as_asgi() in the above code which is the same as .as_view() in the views.py file. This will convert the sync and async functions to ASGI functions.
14. Now go to your asgi.py file and add the following code:
"
from channels.routing import ProtocolTypeRouter

application = ProtocolTypeRouter(
    {
        "http": get_asgi_application(),
        "websocket": URLRouter(
            DjangoChannelsWebSocketApp.routing.websocket_urlpatterns
        ),
    }
)
"
#! NOTE: Uninstall channels using `pip uninstall channels`, then install 'pip install daphne'. Then add 'daphne' at the very beginning in the INSTALLED_APPS of settings.py , again install channels using `pip install channels`.
15. Now go to POSTMAN and send the websocket request to the server using "ws://127.0.0.1:8000/ws/sc/". You can also send data to the server and click the send button.
16. The data send by the user will be in event => {'type': 'websocket.receive', 'text': 'hey ayush, this is message from postman...'}
17. You can get the data by using event[data]
18. Use "self.send({"type": "websocket.accept"})" in the websocket_connect function to accept the connection.
19. Use "raise StopConsumer()" in the websocket_disconnect function to disconnect the connection.
20. Use "await self.send({"type": "websocket.accept"})" in the websocket_connect function to accept the connection for asynchronous functions.
21. Use "self.send({'type':'websocket.send','text':'Message Sent to Client'})" in the websocket_receive function to send data to the client.

#! Real-time Data Example
"
from channels.consumer import SyncConsumer, AsyncConsumer
from channels.exceptions import StopConsumer
from time import sleep
import asyncio

class MySyncConsumer(SyncConsumer):
  def websocket_connect(self, event):
    print('Websocket Connected...', event)
    self.send({
      'type':'websocket.accept',
    })
  
  def websocket_receive(self, event):
    print('Message received from Client', event)
    print(event['text'])
    for i in range(50):
      self.send({
        'type':'websocket.send',
        'text': str(i)
      })
      sleep(1)

  def websocket_disconnect(self, event):
    print('Websocket Disconnected...', event)
    raise StopConsumer()

class MyAsyncConsumer(AsyncConsumer):
  async def websocket_connect(self, event):
    print('Websocket Connected...', event)
    await self.send({
      'type':'websocket.accept',
    })
  
  async def websocket_receive(self, event):
    print('Message received from Client', event)
    print(event['text'])
    for i in range(50):
      await self.send({
        'type':'websocket.send',
        'text': str(i)
      })
      await asyncio.sleep(1)

  async def websocket_disconnect(self, event):
    print('Websocket Disconnected...', event)
    raise StopConsumer()
"
22. time.sleep() is used to create a delay of 1 second between each message sent to the client, but it will not work for asynchronous functions. Use asyncio.sleep() instead for async functions.

#! NOTE: When to use synchronous or asynchronous functions?
1. In general, synchronous functions are used when the task can be completed quickly without blocking other operations, while asynchronous functions are used for tasks that may take some time to complete and should not block the execution of other code.
2. For example, in a web application, you might use a synchronous function to perform a simple calculation that can be done quickly without waiting, like adding two numbers together. On the other hand, you would use an asynchronous function to make an API call to fetch data from a remote server since network requests can take time and you don't want to block the rest of the application while waiting for the response.

#! Handle Websocket from Frontend JavaScript in Django Channels
23. To construct a websocket, use the websocket constructor. For example: var ws = new WebSocket('ws://127.0.0.1:8000/ws/sc/');

a) WebSocket Properties
  1. ReadyState
  2. onopen
  3. onclose
  4. onmessage
  5. onerror

b) WebSocket Methods
  1. send
  2. close

c) WebSocket Events and Event Handlers
  1. open
  2. close
  3. message
  4. error

24. Check templates/index.html for more information.

#! Python JSON Library - 2 imp functions
25. json.dumps() => converts a Python object (dict, list, tuple, string, int, float, True, False, None) into a JSON formatted string
26. json.loads() => converts a JSON formatted string into a Python object (dict, list, tuple, string, int, float, True, False, None)

#! JavaScript Object Notation - 2 imp functions
27. JSON.stringify() => converts a JavaScript object (dict, list, tuple, string, int, float, True, False, None) into a JSON formatted string
28. JSON.parse() => converts a JSON formatted string into a JavaScript object (dict, list, tuple, string, int, float, True, False, None)

#! Channel Layer and Redis Channel Layer in Django Channels
29. Since Redis is native for Linux, we can use Memurai, which is Redis for windows. Refer => https://www.memurai.com/
30. We can also download redis for windows directly from "https://github.com/tporadowski/redis/releases". I am doing this.
31. Install "pip install channels-redis"
32. Add the following code in settings.py:
"
CHANNEL_LAYERS = {
  "default": {
      "BACKEND": "channels_redis.core.RedisChannelLayer",
      "CONFIG": {
          "hosts": [("127.0.0.1", 6379)],
      },
  },
}
"
33. You can get the name of the channel layer using self.channel_layer. 
Example output => "Channel Layer... RedisChannelLayer(hosts=[{'host': '127.0.0.1', 'port': 6379}])"
34. You can get the name of the channel name using self.channel_name
Example output => "Channel Name... specific.8f249b1ec5f9457b9b8c3be38c160cea!dad126a0f6674663aa8374358a4cf5f9"

35. To add a channel_name into a group, use the channel_layer.group_add() function inside websocket_connect(). Refer => https://channels.readthedocs.io/en/latest/topics/channel_layers.html
Example => "self.channel_layer.group_add("programmers", self.channel_name)"

36. group_add() is a async function so to use it inside a synchronous function, we can use the async_to_sync() function.

37. To discard a channel from a group, use the channel_layer.group_discard() function inside websocket_disconnect() function. Refer => https://channels.readthedocs.io/en/latest/topics/channel_layers.html

38. From UI, always use JSON.stringify() and JSON.parse() to convert objects to strings and vice versa respectively. 
Example => 
"
document.getElementById('chat-message-submit').onclick = function (event) {
  const messageInputDom = document.getElementById('chat-message-input')
  const message = messageInputDom.value
  ws.send(JSON.stringify({      // Object to String
    'msg': message
  }))
  messageInputDom.value = ''
}
"
39. The transer of data between the client and server should be in the form of strings, That is why we use JSON.stringify() and JSON.parse() to convert objects to strings and vice versa respectively.

40. To send the message received from the client to the programmers group, add this in websocket_receive():
"
async_to_sync(self.channel_layer.group_send)(
  'programmers', 
  {
    'type': 'chat.message',
    'message':event['text']
  }
)
"

41. For "{"type": "chat.message", "message": event["text"]}", its handler func name will be chat_message. Here the event is chat.message and its event handler is chat_message().
"
def chat_message(self, event):
    print('Event...', event)
    print('Actual Data...', event['message'])
    print('Type of Actual Data...', type(event['message']))
    self.send({
      'type': 'websocket.send',
      'text': event['message']
    })
"
42. chat.message and chat_message are user defined function names, they are not built-in function names.
#! NOTE => for every type of a.b, its handler will be function of a_b(). Check Image number 16
{'type': 'websocket.receive', 'text': '{"msg":"ayush"}'}
"
def websocket_receive(self, event):
        print("Entire Event in websocket_receive:", event)
        print("Message Received from Client...", event["text"])
        print("Type of Message Received from Client...", type(event["text"]))
        async_to_sync(self.channel_layer.group_send)(
            "programmers", {"type": "chat.message", "message": event["text"]}
        )
"

43. The websocket_receive receives the message data from client and sends it to the group, the chat_message then receives the message data from the group and sends it to the client.

44. Handle the data sent from the server to the client in ws.onmessage()
"
ws.onmessage = function (event) {
  console.log('Message Received from Server...', event.data)
  console.log('Type of Message Received from Server...', typeof (event.data))
  const data = JSON.parse(event.data)   // String to Object
  console.log('Parsed Data...', data)
  console.log('Type of Parsed Data...', typeof (data))
  console.log('Actual Message...', data.msg)
  document.querySelector('#chat-log').value += (data.msg + '\n') // append the data.msg to its value
};
"

#! IMP -> CODE REVISION -> 01:16:00 - 01:30:00 (https://www.youtube.com/watch?v=wr-83X_zPyc&list=PLbGui_ZYuhij6LpUbWgKUxggL_AuoHHVw&index=13)

#! AsyncConsumer 
45. Keep the consumers code same with just async function and use await just before sending data.
46. Create a routing url for the consumer.
47. Now use the async url in your template.


#! Dynamic Group Name - IMPORTANT
48. In consumers.py, scope is same as request in the views.py
49. A new dynamic group name is passed in the urls.py "path('<str:group_name>/', views.index)," which will act as a dynamic group name in the consumers.py
50. Now pass this dynamic group name in the url in the views.py and from context pass it to the django template.
51. Prepare a dynamic url and connect it to the consumer.
52. Add that dynamic group name in this 
"
print("Dynamic Group Name...", self.scope['url_route']['kwargs']['group_ka_naam'])
self.group_name = self.scope['url_route']['kwargs']['group_ka_naam']
print("Group Name...", self.group_name)
async_to_sync(self.channel_layer.group_add)(self.group_name, self.channel_name)
"


#! Django Channel Database
53. Create Group and Chat model in models.py
54. Makemigrations and Migrate
55. Register them in admin.py
56. In view, since the group name is accessible through the url, create a new instance of the group and save it in the database. Write logic to prevent adding duplicate groups names.
57. If the group already exists then just get the chats for it and send it to the template using context.
58. This is how you will get the group name from the database and store its corresponding chats in the database => 
"
def websocket_receive(self, event):
        print("Message Received from Client...", event["text"])
        print("Type of Message Received from Client...", type(event["text"]))
        data = json.loads(event["text"])
        print("Data...", data)
        print("Type of Data...", type(data))
        print("Chat Message", data["msg"])
        # Find Group Object
        group = Group.objects.get(name=self.group_name)
        # Create New Chat Object
        chat = Chat(content=data["msg"], group=group)
        chat.save()
        async_to_sync(self.channel_layer.group_send)(self.group_name, {"type": "chat.message", "message": event["text"]})
"
59. For AsyncConsumer, use database_sync_to_async
"
async def websocket_receive(self, event):
    print('Message Received from Client...', event['text'])
    print('Type of Message Received from Client...', type(event['text']))
    data = json.loads(event['text'])
    print("Data...", data)
    print("Type of Data...", type(data))
    print("Chat Message", data['msg'])
    # Find Group Object
    group = await database_sync_to_async(Group.objects.get)(name = self.group_name)
    # Create New Chat Object
    chat = Chat(content = data['msg'],group = group)
    await database_sync_to_async(chat.save)()
    await self.channel_layer.group_send(
      self.group_name, 
      {
        'type': 'chat.message',
        'message':event['text']
      }
    )
"


#! Django Channels Authentication
60. Add "from channels.auth import AuthMiddlewareStack" in asgi.py and wrap the websocket urls in the AuthMiddlewareStack
61. Write if else condition for checking if the user is authenticated or not
"
def websocket_receive(self, event):
        print("Message Received from Client...", event["text"])
        print("Type of Message Received from Client...", type(event["text"]))
        data = json.loads(event["text"])
        print("Data...", data)
        print("Type of Data...", type(data))
        print("Chat Message", data["msg"])

        print("User => ", self.scope["user"])

        # Find Group Object
        group = Group.objects.get(name = self.group_name)
        if self.scope['user'].is_authenticated:
            # Create New Chat Object
            chat = Chat(
                content = data['msg'],
                group = group
            )
            chat.save()
            async_to_sync(self.channel_layer.group_send)(
                self.group_name, 
                {
                'type': 'chat.message',
                'message':event['text']
                }
            )
        else:
            self.send({
                'type':'websocket.send',
                'text': json.dumps({"msg":"Login Required"})
            })

  async def websocket_receive(self, event):
    print('Message Received from Client...', event['text'])
    print('Type of Message Received from Client...', type(event['text']))
    data = json.loads(event['text'])
    print("Data...", data)
    print("Type of Data...", type(data))
    print("Chat Message", data['msg'])
    # Find Group Object
    group = await database_sync_to_async(Group.objects.get)(name = self.group_name)
    if self.scope['user'].is_authenticated:
      # Create New Chat Object
      chat = Chat(
        content = data['msg'],
        group = group
      )
      await database_sync_to_async(chat.save)()
      data['user'] = self.scope['user'].username
      print("Complete Data...", data)
      print("Type of Complete Data...", type(data))
      await self.channel_layer.group_send(
        self.group_name, 
        {
          'type': 'chat.message',
          'message':json.dumps(data)
        }
      )
    else:
      await self.send({
        'type':'websocket.send',
        'text': json.dumps({"msg":"Login Required", "user":"guest"})
      })
"